"use client";
import React, { useState, use, useEffect } from "react";
import useGetPromptByID from "@/api/useGetPromptByID";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Save, Download, Globe, Lock, Tag as TagIcon } from "lucide-react";
import { useRouter } from "next/navigation";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import MarkdownEditor from "@/components/MarkdownEditor";
import { toast } from "sonner";
import { Card, CardContent } from "@/components/ui/card";
import useUpdatePrompt from "@/api/useUpdatePrompt";
import html2pdf from "html2pdf.js";

function Page({ params }: { params: Promise<{ advancedId: string }> }) {
  const { advancedId } = use(params);
  const router = useRouter();
  const { data, isLoading, error } = useGetPromptByID(advancedId);
  const [isMarkdownMode, setIsMarkdownMode] = useState(false);
  const [promptTitle, setPromptTitle] = useState("");
  const [promptContent, setPromptContent] = useState("");
  const [tags, setTags] = useState<string[]>([]);
  const { updatePrompt, isPending } = useUpdatePrompt();

  useEffect(() => {
    if (data) {
      setPromptTitle(data.promptTitle || "");
      setPromptContent(data.promptDescription || "");
      setTags(data.promptTags || []);
    }
  }, [data]);

  const handleClose = () => {
    router.back();
  };

  const handleSavePrompt = () => {
    updatePrompt({
      id: advancedId,
      data: {
        promptTitle,
        promptDescription: promptContent,
        promptTags: tags,
      },
    });
  };

  const handleExportAsPDF = () => {
    // Create a temporary div with the prompt content
    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = `
      <div style="padding: 20px; font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto;">
        <h1 style="color: #333; border-bottom: 2px solid #6366f1; padding-bottom: 10px; margin-bottom: 20px;">
          ${promptTitle || "Untitled Prompt"}
        </h1>
        
        <div style="margin-bottom: 20px;">
          <h3 style="color: #555; margin-bottom: 10px;">Tags:</h3>
          <div style="display: flex; flex-wrap: wrap; gap: 8px;">
            ${tags
              .map(
                (tag) =>
                  `<span style="background: #6366f1; color: white; padding: 4px 12px; border-radius: 20px; font-size: 12px;">${tag}</span>`
              )
              .join("")}
          </div>
        </div>
        
        <div style="margin-bottom: 20px;">
          <h3 style="color: #555; margin-bottom: 10px;">Context:</h3>
          <p style="background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #6366f1;">
            ${data?.promptContext || "No context provided"}
          </p>
        </div>
        
        <div style="margin-bottom: 20px;">
          <h3 style="color: #555; margin-bottom: 10px;">Prompt Content:</h3>
          <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #10b981; white-space: pre-wrap;">
            ${promptContent || "No content provided"}
          </div>
        </div>
        
        <div style="text-align: center; margin-top: 30px; color: #666; font-size: 12px;">
          Generated by PromptSmith - ${new Date().toLocaleDateString()}
        </div>
      </div>
    `;

    const opt = {
      margin: 0.5,
      filename: `${promptTitle || "prompt"}-${Date.now()}.pdf`,
      image: { type: "jpeg", quality: 0.98 },
      html2canvas: { scale: 2, useCORS: true },
      jsPDF: { unit: "in", format: "letter", orientation: "portrait" as const },
    };

    html2pdf()
      .from(tempDiv)
      .set(opt)
      .save()
      .then(() => {
        toast.success("Prompt exported as PDF successfully!", {
          style: {
            backgroundColor: "green",
            color: "white",
          },
        });
      })
      .catch((error) => {
        console.error("PDF export error:", error);
        toast.error("Failed to export PDF. Please try again.");
      });
  };

  if (isLoading)
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center">
        <div className="text-white text-xl">Loading...</div>
      </div>
    );
  if (error)
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center">
        <div className="text-red-400 text-xl">Error: {error.message}</div>
      </div>
    );

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden">
      {/* Animated Background */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000"></div>
        <div className="absolute top-40 left-40 w-80 h-80 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000"></div>
      </div>

      <Dialog open onOpenChange={handleClose}>
        <DialogContent className="max-w-[95vw] w-full h-screen p-0 gap-0 overflow-y-auto bg-white/10 backdrop-blur-md border border-white/20">
          <div className="flex flex-col h-full">
            <DialogHeader className="flex flex-col p-6 border-b border-white/20 bg-white/5">
              <DialogTitle className="text-2xl font-bold bg-gradient-to-r from-white to-purple-200 bg-clip-text text-transparent">
                Advanced Editor
              </DialogTitle>
              <DialogDescription className="text-gray-300">
                Edit your prompt in the advanced editor with enhanced features.
              </DialogDescription>
            </DialogHeader>

            <div className="flex-1 overflow-y-auto p-6">
              <div className="max-w-4xl mx-auto space-y-6">
                <Card className="bg-white/10 backdrop-blur-md border-white/20 shadow-xl">
                  <CardContent className="pt-6 space-y-6">
                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <Input
                          placeholder="Enter your prompt title..."
                          value={promptTitle}
                          onChange={(e) => setPromptTitle(e.target.value)}
                          className="font-medium text-lg bg-white/10 border-white/20 text-white placeholder:text-gray-400 focus:border-purple-400"
                        />
                        <div className="flex items-center gap-2">
                          {data?.isPublic ? (
                            <Globe className="h-5 w-5 text-green-400" />
                          ) : (
                            <Lock className="h-5 w-5 text-gray-400" />
                          )}
                        </div>
                      </div>

                      <div className="space-y-3">
                        <div className="flex items-center gap-2">
                          <TagIcon className="h-4 w-4 text-purple-300" />
                          <h3 className="font-semibold text-white">Tags</h3>
                        </div>
                        <div className="flex flex-wrap gap-2">
                          {tags.map((tag, index) => (
                            <span
                              key={index}
                              className="px-3 py-1 bg-purple-500/30 border border-purple-400/50 text-white rounded-full text-sm flex items-center gap-2 backdrop-blur-sm"
                            >
                              {tag}
                              <button
                                onClick={() =>
                                  setTags(tags.filter((_, i) => i !== index))
                                }
                                className="hover:text-red-300 transition-colors"
                              >
                                Ã—
                              </button>
                            </span>
                          ))}
                          <Input
                            placeholder="Add a tag and press Enter..."
                            className="w-full h-8 text-sm bg-white/10 border-white/20 text-white placeholder:text-gray-400 focus:border-purple-400"
                            onKeyDown={(e) => {
                              if (
                                e.key === "Enter" &&
                                e.currentTarget.value.trim()
                              ) {
                                setTags([
                                  ...tags,
                                  e.currentTarget.value.trim(),
                                ]);
                                e.currentTarget.value = "";
                              }
                            }}
                          />
                        </div>
                      </div>

                      <div className="space-y-3">
                        <h3 className="font-semibold text-white">Context</h3>
                        <Textarea
                          placeholder="Add context for your prompt..."
                          value={data?.promptContext || ""}
                          className="min-h-[100px] bg-white/10 border-white/20 text-white placeholder:text-gray-400 focus:border-purple-400"
                          readOnly
                        />
                      </div>

                      <div className="space-y-3">
                        <div className="flex items-center justify-between">
                          <h3 className="font-semibold text-white">
                            Prompt Content
                          </h3>
                          <div className="flex items-center gap-2 bg-white/10 rounded-lg p-1">
                            <Button
                              variant="ghost"
                              size="sm"
                              className={`${
                                !isMarkdownMode
                                  ? "bg-purple-500/30 text-white"
                                  : "text-gray-300 hover:text-white"
                              } transition-all duration-200`}
                              onClick={() => setIsMarkdownMode(false)}
                            >
                              Plain Text
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              className={`${
                                isMarkdownMode
                                  ? "bg-purple-500/30 text-white"
                                  : "text-gray-300 hover:text-white"
                              } transition-all duration-200`}
                              onClick={() => setIsMarkdownMode(true)}
                            >
                              Markdown
                            </Button>
                          </div>
                        </div>

                        {isMarkdownMode ? (
                          <div className="bg-white/10 border border-white/20 rounded-lg overflow-hidden">
                            <MarkdownEditor
                              content={promptContent}
                              onChange={setPromptContent}
                            />
                          </div>
                        ) : (
                          <Textarea
                            placeholder="Write your prompt here..."
                            className="min-h-[300px] bg-white/10 border-white/20 text-white placeholder:text-gray-400 focus:border-purple-400 resize-none"
                            value={promptContent}
                            onChange={(e) => setPromptContent(e.target.value)}
                          />
                        )}
                      </div>

                      <div className="flex justify-end gap-3 pt-4">
                        <Button
                          variant="outline"
                          onClick={handleSavePrompt}
                          disabled={isPending}
                          className="bg-gradient-to-r from-purple-500/20 to-pink-500/20 border-purple-400 text-white hover:from-purple-500/30 hover:to-pink-500/30 transition-all duration-300"
                        >
                          <Save className="mr-2 h-4 w-4" />
                          Update Prompt
                        </Button>
                        <Button
                          variant="outline"
                          onClick={handleExportAsPDF}
                          className="bg-gradient-to-r from-blue-500/20 to-cyan-500/20 border-blue-400 text-white hover:from-blue-500/30 hover:to-cyan-500/30 transition-all duration-300"
                        >
                          <Download className="mr-2 h-4 w-4" />
                          Export PDF
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}

export default Page;
